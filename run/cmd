#!/bin/bash

set -e

__warning() {
	printf "\e[1;93mWarning:\e[0;93m %s\e[0m\n" "$1"
}

__error() {
	printf "\e[1;31mError:\e[0;31m %s\e[0m\n" "$1"
}

__success() {
	printf "\e[1;92mSuccess\e[0;92m %s\e[0m\n" "$1"
}

__info() {
	if [ -z "$2" ]; then
		printf "\e[37m%s\e[0m\n" "$1"
	else
		printf "\e[1;37m%s: \e[0;37m%s\e[0m\n" "$1" "$2"
	fi
}

__example() {
	printf "\e[1m$ \e[0m%s\n" "$1"
}

__bullet(){
	printf "\e[1m* \e[0m%s\n" "$1"
}

__defined() {
	if [ -z "$1" ]; then
		__error "$2"
		if [ ! -z "$3" ]; then
			__example "$3" "$4"
		fi
		exit 0
	fi
}

__help(){
	__info "------------------------------------------"
	__info "Project management tool"
	__info "------------------------------------------"
	__info
	__info "Docker containers" "run/cmd env:*"
	__example "env:up"
	__example "env:down"
	__example "env:logs"
	__example "env:bash <container_name>"
	__example "env:build"
	__info
	__info "Frontend assets" "run/cmd vue:*"
	__example "vue:install (npm install)"
	__example "vue:build (npm run build)"
	__info
	__info "Couch database" "run/cmd couch:*"
	__example "couch:get <path> (perform get request)"
	__example "couch:setup (perform setup requests)"
	__example "couch:user <name> (get user document)"
	__example "couch:user:create <name> <password> <role>"
	__example "couch:user:update <name> <password> <role>"
	__example "couch:user:delete <name>"
	__example "couch:db:create <database_name> [-a <admin_roles1> ... [-m <member_role1> ...]]"
	__example "couch:db (list all defined databases)"
}

couch_get(){
	local path=${1/\//}
	docker-compose exec couch curl -u $COUCH_USER:$COUCH_PASSWORD -X GET http://localhost:5984/$path
}

couch_put(){
	local path=${1/\//}; shift
	if [ -z "$1" ]; then
		docker-compose exec couch curl -u $COUCH_USER:$COUCH_PASSWORD -X PUT http://localhost:5984/$path
	else
		local request_body=$1; shift
		docker-compose exec couch curl -u $COUCH_USER:$COUCH_PASSWORD -X PUT \
			-H "Accept: application/json" \
			-H "Content-Type: application/json" \
			-d "$request_body" \
			"$@" "http://localhost:5984/$path"
	fi
}

couch_delete(){
	local path=${1/\//}
	local rev=$(couch_revision $1)

	docker-compose exec couch curl -u $COUCH_USER:$COUCH_PASSWORD -X DELETE \
		-H "If-Match: $rev" \
		"http://localhost:5984/$path"
}

couch_revision(){
	local rev=$(couch_get $1 | tr ',' '\n' | grep _rev | awk -F":" '{print $2}')
	if [ -z "$rev" ]; then
		__error "Document $1 not found"
		exit 0
	fi

	rev="${rev%\"}"
	rev="${rev#\"}"
	echo $rev
}

# Find free port starting from $1
get_free_port(){
	netstat -aln | awk -v start="$1" '
	 	$6 == "LISTEN" { 
	 		if ($4 ~ "[.:][0-9]+$") { 
	 			al = split($4, a, /[:.]/); 
 				port = a[al]; 
 				p[port] = 1
	 		} 
	 	}
		END { 
			for (i = start; i < 65000 && p[i]; i++){}; 
			if (i == 65000) {exit 1}; 
			print i 
		}
	'
}

# Services root
export PROJECT_DIR=$( cd "$(dirname "$0")/../" ; pwd -P )

# Document root
export APP_DIR=$PROJECT_DIR/dist

# Map current user to docker user
export CURRENT_UID="$(id -u):$(id -g)"

# Free port for http service
export HTTP_PORT=$(get_free_port 8080)

# Free port for node app (only development environment)
export NODE_PORT=$(get_free_port $(( $HTTP_PORT + 1 )))

if [ -z "$1" ]; then
	__error "Missing command"
	__help
	exit 0
fi

cd $PROJECT_DIR
if [ -f $PROJECT_DIR/.env ]; then
	set -a
	. $PROJECT_DIR/.env
	set +a
else
	__error "Missing .env file"
	exit 0
fi

# Nginx hostname
export HTTP_HOST=$APP_NAME-http

# Couchdb hostname
export COUCH_HOST=$APP_NAME-couch

# Node container name
export NODE_HOST=$APP_NAME-node

# Couchdb port
export COUCH_PORT=$(get_free_port 5984)

case "$1" in
	help)
		__help
		;;
	env:up)
		if [ ! -d "$APP_DIR" ]; then
			__error "Build project first"
			__example "npm run build"
			exit 0
		fi
		
		# Running through traefic or available locally
		if [ -z $(docker ps -q --filter "name=^/gateway$") ]; then
			__warning "Missing gateway proxy"
			__info "Http url" "http://localhost:$HTTP_PORT/"
			__info "CouchDb url" "http://localhost:$COUCH_PORT/"
			docker-compose up -d

		else
			__defined "$PROXY_NAME" "Variable PROXY_NAME should be defined in .env file"
			__defined "$APP_DOMAIN" "Variable APP_DOMAIN should be defined in .env file"
			__info "Url" "http://$APP_DOMAIN/"
			docker-compose -f docker-compose.yml -f run/proxy.yml up -d
		fi
		;;
	env:down)
		docker-compose down
		;;
	env:logs)
		docker-compose logs -f
		;;
	env:build)
		docker-compose build
		;;
	env:bash)
		__defined "$2" "Missing container name" "run/cmd env:bash <container_name>"
		docker-compose exec $2 bash
		;;
	vue:install)
		shift
		docker-compose -f run/cli.yml run node npm install "$@"
		;;
	vue:build)
		shift
		docker-compose -f run/cli.yml run node npm run build "$@"
		;;
	vue:serve)
		__info "Development url" "http://localhost:$NODE_PORT/"
		docker-compose -f run/cli.yml up node
		;;
	couch:get)
		__defined "$2" "Missing resource path" "run/cmd couch:get <resource_path>"
		couch_get "$2"
		;;
	couch:setup)
		couch_put _users
		couch_put _replicator
		couch_put _global_changes
		;;
	couch:user)
		__defined "$2" "Missing username" "run/cmd couch:user <username>"
		couch_get "_users//org.couchdb.user:$2"
		;;
	couch:user:create)
		__defined "$2" "Missing username" "run/cmd couch:user:create <username> <password> <role>"
		__defined "$3" "Missing password" "run/cmd couch:user:create <username> <password> <role>"
		
		role=''
		if [ ! -z $4 ]; then
			role='"'$4'"'
		fi

		couch_put "_users//org.couchdb.user:$2" '{"name":"'$2'", "password":"'$3'", "roles":['$role'], "type":"user"}'
		;;
	couch:user:update)
		__defined "$2" "Missing username" "run/cmd couch:user:update <username> <password> <role>"
		__defined "$3" "Missing password" "run/cmd couch:user:update <username> <password> <role>"

		role=''
		if [ ! -z $4 ]; then
			role='"'$4'"'
		fi

		user_rev=$(couch_revision "_users//org.couchdb.user:$2")
		
		__info "User revision" $user_rev
		couch_put "_users//org.couchdb.user:$2" '{"name":"'$2'", "password":"'$3'", "roles":['$role'], "type":"user"}' -H "If-Match: $user_rev"
		;;
	couch:user:delete)
		__defined "$2" "Missing username" "run/cmd couch:user:delete <username>"
		couch_delete "_users//org.couchdb.user:$2"
		;;
	couch:db:create)
		__defined "$2" "Missing database name" "run/cmd couch:db:create <database_name> [-a <admin_roles1> ... [-m <member_role1> ...]]"
		path="$2"; shift; shift
		type=''
		admins=()
		members=()
		for attr in "$@"
		do
			case "$attr" in
				-a)
					type="admins"
					;;
				-m)
					type="members"
					;;
				*)
					if [[ ${attr:0:1} == '-' ]]; then
						type=''
					else
						case "$type" in
							admins)
								admins+=("$attr")
								;;
							members)
								members+=("$attr")
								;;
						esac
					fi
					;;
			esac
		done

		admins_=$(printf '"%s",' "${admins[@]}")
		admins_=${admins_%,}
		members_=$(printf '"%s",' "${members[@]}")
		members_=${members_%,}

		couch_put "$path"
		couch_put "$path//_security" '{"admins":{"names":[],"roles":['$admins_']},"members":{"names": [],"roles": ['$members_']}}'
		;;
	couch:db)
		IFS=','; read -ra dbs <<< $(couch_get _all_dbs | sed -En "s/\[(.*)\]/\1/p"); unset IFS;
		for db in "${dbs[@]}"
		do
			__bullet $( echo "$db" | sed -En 's/\"//pg' )
		done
		;;
esac
